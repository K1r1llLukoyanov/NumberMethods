import random


def gauss(A, B):
    n = len(A) # количество строк в матрице
    X = [0 for _ in range(len(A[0]))] # Подготавливаем массив для X(для квадратной матрицы кол-во неизвестных = кол-во уравнений)
    for i in range(n-1): # Запускаем цикл от 0 до n-1 (последнюю строку не нужно будет прибавлять к другим)
        j = i # На i-ой операции проводится обнуление всех элементов i-ой колонны под i-ой строкой(j нужен для поиска ненулевой строки)
        while (j < n-1 and A[j][i] == 0): # ищем первую строку коэф при которой в i-ой колонне не равен нулю
            j += 1 # спускаемся вниз по строкам
        if (j == n-1 and A[j][i] == 0):
            continue  # если все строки i-ого столбца под i-ой строкой оказались нулевыми то пропускаем преобразования
        for k in range(j+1, n): # теперь преобразовываем все строки под j-ой строкой(от j+1 до n)
            if (A[k][i] == 0):  # если коэф и так нулевой
                continue        # то пропускаем строку
            coef = -A[k][i]/A[j][i] # подбираем коэф на которую будет умножать j-ую строку
            for l in range(i, len(A[0])): 
                A[k][l] += A[j][l]*coef # умножаем каждый элемент j-ой строки на коэф и прибавляем к элементу k-ой строки на той же колонне
            B[k] += coef*B[j]           # то же самое делаем со свободными членами
        A[i], A[j] = A[j], A[i] # нужно на всякий случай поменять местами j-ую и i-ую строки (если i-ая строка оказалась нулевой, а j-ая нет)
    for i in range(len(A)-1, -1, -1): # теперь вычисляем неизвестные
        if (A[i][i] == 0):  # если коэффициент при i-ом неизвестном равен 0, то он может быть любым числом(например, 
                            # если кол-во строк, больше числа неизвестных)
            X[i] = random.randint(5, 10) # случайное число от 5 до 10
            continue
        else:
            Y = 0  # сумма найденных неизвестных умноженных коэффициенты в i-ой строке
            for j in range(i+1, n):
                Y += A[i][j]*X[j]
            X[i] = (B[i] - Y)/A[i][i]   # вычитаем из свободного члена сумму найденных неизвестных умноженных на свои коэффициенты и делим на
                                        # коэффициент при i-ом неизвестном
    return X


def test(A, X, B): # проверка решения
    n = len(X)
    for i in range(n):
        sum = 0
        for j in range(n):
            sum += X[j]*A[i][j] # находим сумму найденных неизвестных умноженных на свои коэффициенты в i-ой строке.
        print("test for row {}: {}".format(i+1, sum-B[i])) # выводим разницу между свободным членом и суммой

def main():
    A = [[0.3, 0.2, 0.1, 0.4], [0.3, 2.7, 0.1, 0.2],
         [0.1, 0.2, 2.9, 0.3], [0.1, 0.2, 0.2, 3.1]]
    B = [0.1, 0.2, 0.5, 0.8]
    X = gauss(A, B)
    for i, v in enumerate(X):
        print("x{}) {}".format(i+1, v))
    test(A, X, B)


if __name__ == "__main__":
    main()
